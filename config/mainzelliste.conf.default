# Template properties for mainzelliste
#
# The configuration listed here provides default values which should be suitable for
# a variety of szenarios. At least, the sections "Database setup" and "xDAT servers"
# should be adjusted to the local environment.

# General format: Key-value pairs, separated by spaces, tabs, "=", ":". 
# Lines starting with "#" are comments. Comments appended to a line are not possible!
# See Javadoc for java.util.Properties#load(Reader) for details.

# Property names may contain letters, numbers, underscores and dots. Dots define a hierarchical
# structure on the property names.

# Leading and trailing whitespaces in property values are not allowed and will be removed
# after loading.

# For a comprehensive documentation of configuration parameters see the configuration manual
# ("Konfigurationshandbuch").

# debug mode: If set to true, token handling is disabled (i.e. no tokens are necessary).
debug = false

# Name of this mainzelliste distribution instance.
dist = Mainzelliste

# Database setup

# Uncomment this for PostgreSQL
# db.driver = org.postgresql.Driver
# db.url = jdbc:postgresql://localhost:5432/mainzelliste

# Uncomment this for MySQL
# db.driver = com.mysql.jdbc.Driver
# db.url = jdbc:mysql://localhost:3306/mainzelliste

db.username = mainzelliste
db.password = mainzelliste

# Logging
#
# By default, logs are written to stdout. Uncomment the following values to log to a file
# instead.
 
#log.filename = /var/log/tomcat6/mainzelliste.log
#log.level = DEBUG






# Field definitions
#
# Every input field must be defined here with field.{fieldname}.type = {fieldtype},
# where fieldname is a unique identifier and fieldtype the name of a subclass of Field.
# Input data from the field will be stored in objects of that class.
#
# Every field defined here must either be contained in the input form 
# WEB-INF/jsp/patientFormElements.jsp (with corresponding "name"-Tag) or
# be provided in the createPatient Token

# In order to deactivate fields temporarily, it is sufficient to comment out the field definition.
field.patientID.type = PlainTextField
field.patientName.type = PlainTextField
field.patientBirthDate.type = PlainTextField
field.patientBirthTime.type = PlainTextField 
field.patientAge.type = PlainTextField
field.patientAddress.type = PlainTextField



# Server-side validation

# validator.field.{fieldname}.required: Whether a field must not be empty
validator.field.patientID.required = true

# validator.field.{fieldname}.format: Regular expresssion which a field must adhere to.

# Default: letters, dots, underscores, apostrophes, spaces; at least one letter.
#validator.field.firstname.format = [A-Za-zäÄöÖüÜß\\.\\-' ]*[A-Za-zäÄöÖüÜß]+[A-Za-zäÄöÖüÜß\\.\\-' ]*
validator.field.patientName.format = .*







# Field transformations
#
# Transformations for a field {fieldname} are defined by
# field.{fieldname}.transformers = {transformerlist}, where
# transformerlist is a comma-separated list of names of subclasses of FieldTransformer.
# 
# The first transformer in the list is applied to the input field as defined in the field definition;
# i.e. the type parameter IN of the first transformer must match the class of the field.
# Every subsequent transformer is applied to the output of its predecessor; i.e. its type parameter IN
# must match type parameter OUT of the preceding transformer.

#field.firstname.transformers = StringNormalizer, FirstNameDecomposer
#field.lastname.transformers = StringNormalizer, GermanLastNameDecomposer

# field comparators
field.patientName.comparator = NGramComparator
field.patientAddress.comparator = NGramComparator
field.patientAge.comparator = NGramComparator

field.patientID.comparator = BinaryFieldComparator
field.patientBirthDate.comparator = BinaryFieldComparator
field.patientBirthTime.comparator = BinaryFieldComparator





# Matcher definition
# Property matcher defines the class name of the matcher to use, which must be a subclass
# of Matcher. Currently only EpilinkMatcher and NullMatcher are suppcityed.
# Null matcher is used to skip the step of record linkage
# matcher = EpilinkMatcher
matcher = NullMatcher





# ID-Generators
# 
# idgenerators: A comma-seperated list of identifiers of ID-Generators, corresponding to ID types.
# External id types should be also listed here

# For every generator:
# idgenerator.{identifier}: Class which implements the ID generator.
# additional parameters depend on the ID generator used.
#
#idgenerators = pid, intid

# For externally generated id types (impcityed from external systems) use ExternalIDGenerator
#idgenerators = pid, intid, extid, elasticid
idgenerators = pid, elasticid

# By default, IDs are generated once they are requested (lazy generation).
# Set the following parameter to true if upon creating a patient, IDs of all
# configured types should be created for this patient eagerly.
idgenerators.eagerGeneration = false

# Additional params for PIDGenerator (k1, k2, k3, rndwidth) are defined here.
idgenerator.pid = PIDGenerator
idgenerator.pid.k1 = 1
idgenerator.pid.k2 = 2
idgenerator.pid.k3 = 3
# rndwidth is optional (default 0)
idgenerator.pid.rndwidth = 0

idgenerator.intid = SimpleIDGenerator

# ElasticIDGenerator is used for randomly generated id types with the flexible length and vocabulary
# Additional params for ElasticIDGenerator are defined here.
idgenerator.elasticid = ElasticIDGenerator
idgenerator.elasticid.vocabulary = 123456789ACDEFGHJKMNPQURTUVWXYZ
idgenerator.elasticid.length = 16

# For externally generated id types (impcityed from external systems) use ExternalIDGenerator
idgenerator.extid = ExternalIDGenerator





# Output of result

# Whether to show a result page (defaults to true)
# Set to false if you use a redirect address with "addPatient"-Tokens
# and want the user to be immediately redirected to the calling application.
# Only applicable if a redirect address is defined in a token
result.show = false

# Whether to include Idat in the result page.
result.printIdat = false

# Set a fixed language for the user interface. Must be a language code for which a
# MessageBundle exists in the application. Current valid values are "en" and "de"
# language =

# xDAT servers
# 
# Known Permissions / Token Types:
# 
# - showSessionIds: see own sessions via GET /sessions
# - createSession: create session via POST /sessions
# - manageSessionPatients: manage the set of patients related to a session 
#	(operations on /sessions/{sessionid}/patients)
# 
# - createToken: create tokens -- in addition, permission "tt_x" is req'd, where x is one of these TOKEN TYPES:
#   - tt_addPatient: allows to generate one (1) ID. Token is invalidated afterwards even if an existing ID was returned.
#	- tt_readPatients: allows to read IDAT or pseudonyms of patients
#   - tt_editPatient: allows to change identifying data of one (1) patient. Token is invalidated afterwards.
#
# readAllPatientIdTypes: allows to read all IdTypes of a patient
# readAllPatientIds: allows to read all Ids of a patient







# A passphrase used for authentication
servers.0.apiKey = 
servers.0.permissions = createSession;showSessionIds;createToken;tt_addPatient;tt_readPatients;tt_editPatient







# Accepted origin addresses (IPv4 and/or IPv6) or address ranges in CIDR notation (IPv4 only)
 
# Allow only requests from localhost (e.g. for developing)
# servers.0.allowedRemoteAdresses = 127.0.0.1;0:0:0:0:0:0:0:1

# Allow requests from a typical private network
# servers.0.allowedRemoteAdresses = 192.168.56.0/24

# Allow combination of both
# servers.0.allowedRemoteAdresses = 127.0.0.1;0:0:0:0:0:0:0:1;192.168.56.0/24

# Allowed origins for cross origin resource sharing (CORS), multiple values separated by ";"

# servers.allowedOrigins = https://mdat-server.example.org 

# Allowed Format of callback
callback.allowedFormat = http://.*
callback.allowSelfsigned = false

# Session timeout
# A session will be deleted if not accessed for this amount of time, specified in minutes
# Default value if not specified: 10
sessionTimeout = 420
